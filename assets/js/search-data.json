{
  "0": {
    "id": "0",
    "title": "",
    "content": "  404  Page not found :(  The requested page could not be found.",
    "url": "/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "Web",
    "content": "Web(adjacency=None, title='webweb', display={}, **kwargs)a webweb object. a collection of named webweb Network objects, a set of display parameters, and a titleparameters:  adjacency: adjacency to make a visulization from. see Network.add_layer  title: string. Will set the html title of the visualization if display.attachWebwebToElementWithId = None  display: dictionary of display parameters  see Network.add_layer for all other parameters.",
    "url": "/docs/documentation/python/Web.html",
    "relUrl": "/docs/documentation/python/Web.html"
  },
  "2": {
    "id": "2",
    "title": "Web.networks.name",
    "content": "Web.networks.name()a webweb Network object",
    "url": "/docs/documentation/python/Web.networks.name.html",
    "relUrl": "/docs/documentation/python/Web.networks.name.html"
  },
  "3": {
    "id": "3",
    "title": "Web.networks.name.add_layer",
    "content": "Web.networks.name.add_layer(adjacency=None, adjacency_type=None, nodes=None, metadata=None, nx_G=None)adds a layer to the network.  adjacency: edge list or adjacency matrix  adjacency_type: string. ‘matrix’ or ‘edge list’. Supply if passing an adjacency matrix with fewer than 3 nodes  nodes: dict of node attribute dicts  metadata: dict of vectorized metadata and display information.{  'attribute' : {      'values' : [ &quot;attribute_value&quot;, ...],      'categories' : [&quot;category1&quot;, &quot;category2&quot;, ...] (supply if values is categorical but contains numbers; values in the `values` array will be used as indexes to this array)      'type' : string. Only necessary if displaying binary information with 0/1 and not True/False.  }}  nx_G: a networkx graph.call with at least one of:  adjacency  nodes  metadata  nx_G",
    "url": "/docs/documentation/python/Web.networks.name_add_layer.html",
    "relUrl": "/docs/documentation/python/Web.networks.name_add_layer.html"
  },
  "4": {
    "id": "4",
    "title": "Web.save",
    "content": "Web.save(path)saves the webweb visualization to the specified pathparameters:  path: the path to save to.",
    "url": "/docs/documentation/python/Web_save.html",
    "relUrl": "/docs/documentation/python/Web_save.html"
  },
  "5": {
    "id": "5",
    "title": "Web.show",
    "content": "Web.show()display the webweb visualization.  creates the html file  opens the web browser",
    "url": "/docs/documentation/python/Web_show.html",
    "relUrl": "/docs/documentation/python/Web_show.html"
  },
  "6": {
    "id": "6",
    "title": "about",
    "content": "who made itDan Larremore made this! Hunter Wapman worked on it too. Michael Iuzzolino first made the python interface.Some other people helped too.why though?Sometimes, you need to see a network right now – You don’t want to finagle 400 libraries or debug, you just want to see it. Right. Now. Enter webweb.howThe driver for webweb is written in javascript, and makes heavy use of d3js.The website is made using the static site-generator jekyll. It uses a customized version of the jekyll theme just the docs.",
    "url": "/about/",
    "relUrl": "/about/"
  },
  "7": {
    "id": "7",
    "title": "add node metadata: binary",
    "content": "webweb’ll display a metadata attribute as binary if every node’s value for that attribute is either True or False.True values will be “big” and False values small, but if we want the opposite, we can do the following:web.display.invertBinarySizes = Trueshowing:                 python            python (networkx)            matlab            jsonfrom webweb import Webweb = Web(    adjacency=[['Dan', 'Hunter'], ['Brian', 'Hunter'], ['Carl', 'Hunter'], ['Carl', 'Brian']],    display={        'nodes' : {            'Dan' : {                'wearsGlasses' : True,            },            'Hunter' : {                'wearsGlasses' : True,            },            'Brian' : {                'wearsGlasses' : True,            },            'Carl' : {                'wearsGlasses' : False,            },            'Tzu-Chi' : {},        },        'metadata' : {            'wearsContacts' : {                'values' : [True, False, True, False, False],            }        }    },)# use the 'wearsGlasses' to compute node sizesweb.display.sizeBy = 'wearsGlasses'web.display.colorBy = 'wearsContacts'# show the visualizationweb.show()from webweb import Webimport networkx as nx# webweb'll display a metadata attribute as binary if every node's value for# that attribute is either True or False.G = nx.Graph()G.add_edges_from([['Dan', 'Hunter'], ['Brian', 'Hunter'], ['Carl', 'Hunter'], ['Carl', 'Brian']])G.nodes['Dan']['wearsGlasses'] = TrueG.nodes['Hunter']['wearsGlasses'] = TrueG.nodes['Brian']['wearsGlasses'] = TrueG.nodes['Carl']['wearsGlasses'] = False# `True` values will be &quot;big&quot; and `False` values small, but if we wanted the# opposite, we could do the following:# web.display.invertBinarySizes = True# create the webweb = Web(nx_G=G)# use the 'wearsGlasses' to compute node sizesweb.display.sizeBy = 'wearsGlasses'# show the visualizationweb.show()% define an edge listedge_list = [...    1, 2;    2, 3;    2, 4;    3, 4;    ];% define names for the nodesnames = {'Dan','Hunter','Brian','Carl'};% put the edge list and names into a webweb struct called wwww.networks.network.edgeList = edge_list;ww.display.metadata.name.values = names;% put some boolean metadata into the same structwearsGlasses = [1,1,1,0];ww.display.metadata.wearsGlasses.values = wearsGlasses;ww.display.metadata.wearsGlasses.type   = 'binary';% call webwebwebweb(ww);{    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;wearsContacts&quot;,        &quot;metadata&quot;: {            &quot;wearsContacts&quot;: {                &quot;values&quot;: [                    true,                    false,                    true,                    false,                    false                ]            }        },        &quot;nodes&quot;: {            &quot;Brian&quot;: {                &quot;wearsGlasses&quot;: true            },            &quot;Carl&quot;: {                &quot;wearsGlasses&quot;: false            },            &quot;Dan&quot;: {                &quot;wearsGlasses&quot;: true            },            &quot;Hunter&quot;: {                &quot;wearsGlasses&quot;: true            },            &quot;Tzu-Chi&quot;: {}        },        &quot;sizeBy&quot;: &quot;wearsGlasses&quot;    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            &quot;Dan&quot;,                            &quot;Hunter&quot;                        ],                        [                            &quot;Brian&quot;,                            &quot;Hunter&quot;                        ],                        [                            &quot;Carl&quot;,                            &quot;Hunter&quot;                        ],                        [                            &quot;Carl&quot;,                            &quot;Brian&quot;                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/add_node_metadata_binary.html",
    "relUrl": "/docs/examples/add_node_metadata_binary.html"
  },
  "8": {
    "id": "8",
    "title": "add node metadata: categorical",
    "content": "if the set of a metadata attribute’s values contains strings (like cooperativity here), webweb’ll display it as a categorical attribute.if that set is all numbers (like alphabeticallity here), you should tell webweb how to display it by adding that metadata attribute name to the metadata key to the display attribute with an array under categories; a node’s value for this metadata attribute should be an index into this array.showing:                 python            python (networkx)            matlab            jsonfrom webweb import Webweb = Web(    adjacency=[[0, 1], [1, 2]],    display={        'nodes' : {            0 : {                'cooperativity' : 'high',                'alphabeticallity' : 0,            },            1 : {                'cooperativity' : 'low',                'alphabeticallity' : 1,            },            2 : {                'cooperativity' : 'medium',                'alphabeticallity' : 2,            },        },        'metadata' : {            'alphabeticallity' : {                'categories' : ['A-Z', 'a-z', 'W+'],            }        },    },)# we'll compute node color by the `alphabeticallity` metadata attribute# (categorical metadata can't be used to compute node sizes)web.display.colorBy = 'alphabeticallity'# show the visualizationweb.show()from webweb import Webimport networkx as nx# webweb'll display a metadata attribute as binary if every node's value for# that attribute is either True or False.G = nx.Graph()G.add_edges_from([[0, 1], [1, 2]])G.nodes[0]['cooperativity'] = 'high'G.nodes[0]['alphabeticallity'] = 0G.nodes[1]['cooperativity'] = 'low'G.nodes[1]['alphabeticallity'] = 1G.nodes[2]['cooperativity'] = 'medium'G.nodes[2]['alphabeticallity'] = 2# if the set of a metadata attribute's values contains strings (like# 'cooperativity' here), webweb'll display it as a categorical variable.# if that set contains numbers (like 'alphabeticallity' here), you should tell# webweb how to display it by adding that metadata attribute name to the# `metadataInfo` key to the `display` attribute with an array under# `categories`; a node's value for this metadata attribute should be an index# into this array.web = Web(    nx_G=G,    display={        'metadataInfo' : {            'alphabeticallity' : {                'categories' : ['A-Z', 'a-z', 'W+'],            }        },    })# we'll compute node color by the `alphabeticallity` metadata attribute# (categorical metadata can't be used to compute node sizes)web.display.colorBy = 'alphabeticallity'# show the visualizationweb.show()% define a couple edgesedges = [...    1,2;    2,3;...    ];% place the edges in a webweb struct called wwww.networks.network.edgeList = edges;% Define categorical metadata sets in TWO different ways% 1. Categories defined by integers with a set of integer-assigned keysalphabeticallity = [1,2,3];alphabeticallity_keys = {'A-Z','a-z','W+;'};ww.display.metadata.alphabeticallity.values = alphabeticallity;ww.display.metadata.alphabeticallity.categories = alphabeticallity_keys;% 2. Categories defined directly by stringscooperativity = {'high','medium','low'};ww.display.metadata.cooperativity.values = cooperativity;% BONUS: ask webweb to default to present colors by alphabeticallity% This assignment simply needs to match the key of the metadata above.ww.display.colorBy = 'alphabeticallity';% call webwebwebweb(ww);{    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;alphabeticallity&quot;,        &quot;metadata&quot;: {            &quot;alphabeticallity&quot;: {                &quot;categories&quot;: [                    &quot;A-Z&quot;,                    &quot;a-z&quot;,                    &quot;W+&quot;                ]            }        },        &quot;nodes&quot;: {            &quot;0&quot;: {                &quot;alphabeticallity&quot;: 0,                &quot;cooperativity&quot;: &quot;high&quot;            },            &quot;1&quot;: {                &quot;alphabeticallity&quot;: 1,                &quot;cooperativity&quot;: &quot;low&quot;            },            &quot;2&quot;: {                &quot;alphabeticallity&quot;: 2,                &quot;cooperativity&quot;: &quot;medium&quot;            }        }    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/add_node_metadata_categorical.html",
    "relUrl": "/docs/examples/add_node_metadata_categorical.html"
  },
  "9": {
    "id": "9",
    "title": "add node metadata: scalar",
    "content": "If nodes are indexes, we can add metadata as a vector, like we’ve done here for the velocity attribute. A node’s value for this attribute will be the value at its id’s index in this array.showing:                 python            python (networkx)            matlab            jsonfrom webweb import Webweb = Web(    adjacency=[[0, 1], [1, 2]],    display={        'nodes' : {            0 : {                'age' : 10,            },            1 : {                'age' : 20,            },            2 : {                'age' : 30,            },        },        'metadata' : {            'velocity' : {                'values' : [42, 100, 7]            },        },    },)# we'll compute node size by the `age` metadata attributeweb.display.sizeBy = 'age'# we'll compute node color by the `velocity` metadata attributeweb.display.colorBy = 'velocity'# show the visualizationweb.show()from webweb import Webimport networkx as nxG = nx.Graph()G.add_edges_from([[0, 1], [1, 2]])G.nodes[0]['age'] = 10G.nodes[0]['velocity'] = 42G.nodes[1]['age'] = 20G.nodes[1]['velocity'] = 100G.nodes[2]['age'] = 30G.nodes[2]['velocity'] = 7web = Web(nx_G=G)# we'll compute node size by the `age` metadata attributeweb.display.sizeBy = 'age'# we'll compute node color by the `velocity` metadata attributeweb.display.colorBy = 'velocity'# show the visualizationweb.show()% define a couple edgesedges = [...    1,2;    2,3;...    ];% Place the edges in a webweb struct called wwww.networks.network.edgeList = edges;% Define two scalar metadata setsage = [10,20,30];velocity = [42,100,7];% Put them in the webweb structww.display.metadata.age.values = age;ww.display.metadata.velocity.values = velocity;% BONUS: ask webweb to use age for default node size%        ask webweb to use velocity for default node color% These assignments simply need to match the key of the metadata above.ww.display.sizeBy = 'age';ww.display.colorBy = 'velocity';% call webwebwebweb(ww);{    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;velocity&quot;,        &quot;metadata&quot;: {            &quot;velocity&quot;: {                &quot;values&quot;: [                    42,                    100,                    7                ]            }        },        &quot;nodes&quot;: {            &quot;0&quot;: {                &quot;age&quot;: 10            },            &quot;1&quot;: {                &quot;age&quot;: 20            },            &quot;2&quot;: {                &quot;age&quot;: 30            }        },        &quot;sizeBy&quot;: &quot;age&quot;    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/add_node_metadata_scalar.html",
    "relUrl": "/docs/examples/add_node_metadata_scalar.html"
  },
  "10": {
    "id": "10",
    "title": "add node names",
    "content": "we can add node names by setting the nodes attribute in the display variablea node in the adjacency list (e.g., 0 here) will have the metadata of the entry under the same key in the nodes dictionary (if one exists)showing:                 python            python (networkx)            matlab            jsonfrom webweb import Webweb = Web(    adjacency=[[0, 1], [1, 2]],    display={        'nodes' : {            0 : {                'name' : 'Huberg',            },            1 : {                'name' : 'Pierot',            },            2 : {                'name' : 'Slartibertfast',            },        },    },)# show the visualizationweb.show()from webweb import Webimport networkx as nxG = nx.Graph()G.add_edges_from([[0, 1], [1, 2]])G.nodes[0]['name'] = 'Huberg'G.nodes[1]['name'] = 'Pierot'G.nodes[2]['name'] = 'Slartibertfast'# create the webweb = Web(nx_G=G)# show the visualizationweb.show()% define a couple edgesedges = [...    1,2;    2,3;...    ];% Place the edges in a webweb struct called wwww.networks.network.edgeList = edges;% Define some names in an array of cells containing stringsnames = {'Huberg','Pierot','Slartibertfast'};% Put the names in metadata with the special key &quot;names&quot;ww.display.metadata.name.values = names;% Call webwebwebweb(ww){    &quot;display&quot;: {        &quot;nodes&quot;: {            &quot;0&quot;: {                &quot;name&quot;: &quot;Huberg&quot;            },            &quot;1&quot;: {                &quot;name&quot;: &quot;Pierot&quot;            },            &quot;2&quot;: {                &quot;name&quot;: &quot;Slartibertfast&quot;            }        }    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/add_node_names.html",
    "relUrl": "/docs/examples/add_node_names.html"
  },
  "11": {
    "id": "11",
    "title": "attachWebwebToElementWithId",
    "content": "type: stringwe can attach webweb to an existing html element by setting the attachWebwebToElementWithId parameter. This is useful for embedding webweb.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])# attach the visualization to a given element (no '#')web.display.attachWebwebToElementWithId = 'myElement'# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;attachWebwebToElementWithId&quot;: &quot;myElement&quot;    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/attachWebwebToElementWithId.html",
    "relUrl": "/docs/documentation/display/attachWebwebToElementWithId.html"
  },
  "12": {
    "id": "12",
    "title": "charge",
    "content": "type: positive non-zero integersynonyms: cdefault: 60we can change how much nodes repulse each other.the greater the value for charge, the more nodes will repel each other.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])# could also set web.display.cweb.display.charge = 150# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;charge&quot;: 150    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/charge.html",
    "relUrl": "/docs/documentation/display/charge.html"
  },
  "13": {
    "id": "13",
    "title": "colorBy",
    "content": "type: stringdefault: ‘none’we can color nodes by a metadata attribute by setting the colorBy parameter to that attribute’s name.any metadata attribute can be used to compute node size.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], display={    'metadata' : {        'emotion' : {            'values' : ['happy', 'sad', 'angry', 'sad', 'happy', 'sad']        }    }})# use the 'emotion' attribute to color nodesweb.display.colorBy = 'emotion'# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;emotion&quot;,        &quot;metadata&quot;: {            &quot;emotion&quot;: {                &quot;values&quot;: [                    &quot;happy&quot;,                    &quot;sad&quot;,                    &quot;angry&quot;,                    &quot;sad&quot;,                    &quot;happy&quot;,                    &quot;sad&quot;                ]            }        }    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/colorBy.html",
    "relUrl": "/docs/documentation/display/colorBy.html"
  },
  "14": {
    "id": "14",
    "title": "colorPalette",
    "content": "type: stringdefault: ‘Set1’we can change the color palette webweb uses to color categorical nodes with the colorPalette parameter.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], display={    'metadata' : {        'emotion' : {            'values' : ['happy', 'sad', 'angry', 'sad', 'happy', 'sad']        }    }})# use the 'emotion' attribute to color nodesweb.display.colorBy = 'emotion'# set the color palette to use# this value will be used as when we are `display.colorBy` references a# categorical or binary attributeweb.display.colorPalette = 'Set3'# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;emotion&quot;,        &quot;colorPalette&quot;: &quot;Set3&quot;,        &quot;metadata&quot;: {            &quot;emotion&quot;: {                &quot;values&quot;: [                    &quot;happy&quot;,                    &quot;sad&quot;,                    &quot;angry&quot;,                    &quot;sad&quot;,                    &quot;happy&quot;,                    &quot;sad&quot;                ]            }        }    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/colorPalette.html",
    "relUrl": "/docs/documentation/display/colorPalette.html"
  },
  "15": {
    "id": "15",
    "title": "contributing",
    "content": "you can contribute too!",
    "url": "/contributing/",
    "relUrl": "/contributing/"
  },
  "16": {
    "id": "16",
    "title": "development",
    "content": "",
    "url": "/development/",
    "relUrl": "/development/"
  },
  "17": {
    "id": "17",
    "title": "display",
    "content": "",
    "url": "/documentation/display/",
    "relUrl": "/documentation/display/"
  },
  "18": {
    "id": "18",
    "title": "display from adjacency matrix",
    "content": "webweb’ll guess whether you’ve given it an edge list or adjacency matrix.showing:                 python            matlab            jsonfrom webweb import Web# make an unweighted adjacency matrixadjacency_matrix = [    [0, 1, 0, 0],    [1, 0, 1, 0],    [0, 1, 0, 1],    [0, 0, 1, 0],]# if you give webweb a matrix with fewer than 4 nodes, it'll think it's an edge# list unless you tell it what's what like so: # web = Web(adjacency_matrix, adjacency_type='matrix')web = Web(adjacency_matrix)# show the visualizationweb.show()% make an unweighted adjacency matrixadjacency_matrix = [...    0, 1, 0, 0;...    1, 0, 1, 0;...    0, 1, 0, 1;...    0, 0, 1, 0;...];% call webwebwebweb(adjacency_matrix);{    &quot;display&quot;: {},    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            1,                            0,                            1                        ],                        [                            2,                            1,                            1                        ],                        [                            3,                            2,                            1                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: {                        &quot;0&quot;: {},                        &quot;1&quot;: {},                        &quot;2&quot;: {},                        &quot;3&quot;: {}                    }                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/display_from_adjacency_matrix.html",
    "relUrl": "/docs/examples/display_from_adjacency_matrix.html"
  },
  "19": {
    "id": "19",
    "title": "display from edge list",
    "content": "showing:                 python            python (networkx)            matlab            jsonfrom webweb import Web# make a list of unweighted edges# (nodes can be numbers or strings)edge_list = [[0, 1], [1, 2], [2, 3]]# create the webweb = Web(edge_list)# show the visualizationweb.show()from webweb import Webimport networkx as nxG = nx.Graph()G.add_edges_from([[0,1], [1, 2], [2, 3]])# create the webweb = Web(nx_G=G)# show the visualizationweb.show()% make a list of unweighted edgesedge_list = [...    1, 2;    2, 3;    3, 4;    ];% call webwebwebweb(edge_list);{    &quot;display&quot;: {},    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/display_from_edge_list.html",
    "relUrl": "/docs/examples/display_from_edge_list.html"
  },
  "20": {
    "id": "20",
    "title": "display from weighted adjacency matrix",
    "content": "if both edges between two nodes are non-zero in the adjacency matrix, the first edge’s weight is used (webweb traverses adjacency matrixes row-wise).In other words, if you give webweb an adjacency matrix where matrix[0][1] = .1 and matrix[1][0] = 1, it’ll make an edge between nodes 0 and 1 with a weight .1, and not 1, or 1.1showing:                 python            matlab            jsonfrom webweb import Webadjacency_matrix = [    [0, .1, 0, 0, 0],    [.1, 0, .5, 0, 0],    [0, .5, 0, 1, 0],    [0, 0, 1, 0, 2],    [0, 0, 0, 2, 0],]# create the webweb = Web(adjacency_matrix)# we'll scale edge widths by weight to create a visual differenceweb.display.scaleLinkWidth = True# show the visualizationweb.show()% define a weighted adjacency matrixadjacency_matrix = [...    0, .1, 0, 0, 0;...    .1, 0, .5, 0, 0;...    0, .5, 0, 1, 0;...    0, 0, 1, 0, 2;...    0, 0, 0, 2, 0;...];% call webwebwebweb(adjacency_matrix);%% [OPTIONAL] Set default: show weighted edges.% To set a default parameter, we need to creat a webweb struct% and place our parameter setting in it.%% Convert from the matrix to an edgeList.[from,to,weight] = find(triu(adjacency_matrix));% Place this edgeList into a network within the webweb structww.networks.network.edgeList = [from,to,weight];% Set scaleLinkWidth to True. ww.display.scaleLinkWidth = 'True';% call webwebwebweb(ww);{    &quot;display&quot;: {        &quot;scaleLinkWidth&quot;: true    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            1,                            0,                            0.1                        ],                        [                            2,                            1,                            0.5                        ],                        [                            3,                            2,                            1                        ],                        [                            4,                            3,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: {                        &quot;0&quot;: {},                        &quot;1&quot;: {},                        &quot;2&quot;: {},                        &quot;3&quot;: {},                        &quot;4&quot;: {}                    }                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/display_from_weighted_adjacency_matrix.html",
    "relUrl": "/docs/examples/display_from_weighted_adjacency_matrix.html"
  },
  "21": {
    "id": "21",
    "title": "display from weighted edge list",
    "content": "if there are multiple edges between two nodes, the first edge’s weight is used.In other words, if you give webweb an edge list like [[0, 1, .1], [0, 1, 1]], it’ll make an edge between nodes 0 and 1 with a weight .1, not 1, or 1.1 (this would also be the case for the edge list [[0, 1, .1], [1, 0, 1]])showing:                 python            python (networkx)            matlab            jsonfrom webweb import Web# edge weights are the third element in the edgeedge_list = [[0, 1, .1], [1, 2, .5], [2, 3, 1], [3, 4, 2]]# create the webweb = Web(edge_list)# we'll scale edge widths by weight to create a visual differenceweb.display.scaleLinkWidth = True# show the visualizationweb.show()from webweb import Webimport networkx as nxG = nx.Graph()G.add_edges_from([[0, 1, {'weight' : .1}], [1, 2, {'weight' : .5}], [2, 3, {'weight' : 1}], [3, 4, {'weight' : 2}]])# create the webweb = Web(nx_G=G)# scale edge widths by weight so we can see a visual differenceweb.display.scaleLinkWidth = True# show the visualizationweb.show()% make a matrix of weighted edges% edge weights are the third element in the edgeedge_list = [...    1, 2, .1;...     2, 3, .5;...     3, 4, 1;...     4, 5, 2;...];% call webwebwebweb(edge_list);%% [OPTIONAL] Set default: show weighted edges.% To set a default parameter, we need to creat a webweb struct% and place our parameter setting in it.% Place this edgeList into a network within the webweb structww.networks.network.edgeList = edge_list;% Set scaleLinkWidth to True. ww.display.scaleLinkWidth = 'True';% call webwebwebweb(ww);{    &quot;display&quot;: {        &quot;scaleLinkWidth&quot;: true    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1,                            0.1                        ],                        [                            1,                            2,                            0.5                        ],                        [                            2,                            3,                            1                        ],                        [                            3,                            4,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/display_from_weighted_edge_list.html",
    "relUrl": "/docs/examples/display_from_weighted_edge_list.html"
  },
  "22": {
    "id": "22",
    "title": "documentation",
    "content": "full documentation for webweb’s parameters and interfaces",
    "url": "/documentation/",
    "relUrl": "/documentation/"
  },
  "23": {
    "id": "23",
    "title": "examples",
    "content": "",
    "url": "/examples/",
    "relUrl": "/examples/"
  },
  "24": {
    "id": "24",
    "title": "freezeNodeMovement",
    "content": "type: booleandefault: falseIf true, fixes nodes wherever they are. Drag &amp;amp; drop still works. This is probably not a good idea to set unless we’re passing node coordinates as metadata attributes (it’ll leave all the nodes at the top left corner of the visualization).showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web(    adjacency=[[0, 1]],    display={        'nodes' : {            0 : {                'x' : 100,                'y' : 75,            },            1 : {                'x' : 100,                'y' : 150,            },        },    })web.display.freezeNodeMovement = True# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;freezeNodeMovement&quot;: true,        &quot;nodes&quot;: {            &quot;0&quot;: {                &quot;x&quot;: 100,                &quot;y&quot;: 75            },            &quot;1&quot;: {                &quot;x&quot;: 100,                &quot;y&quot;: 150            }        }    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/freezeNodeMovement.html",
    "relUrl": "/docs/documentation/display/freezeNodeMovement.html"
  },
  "25": {
    "id": "25",
    "title": "getting started",
    "content": "",
    "url": "/getting-started/",
    "relUrl": "/getting-started/"
  },
  "26": {
    "id": "26",
    "title": "gravity",
    "content": "type: positive non-zero floatsynonyms: gdefault: 0.1we can change the strength of the force pulling nodes to the center.the greater the value for gravity, the more nodes will be drawn to the center.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])web.display.gravity = .01# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;gravity&quot;: 0.01    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/gravity.html",
    "relUrl": "/docs/documentation/display/gravity.html"
  },
  "27": {
    "id": "27",
    "title": "height",
    "content": "type: positive non-zero integersynonyms: hwe can change the height of the visualization by setting the display.height property.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])web.display.height = 50# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;height&quot;: 50    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/height.html",
    "relUrl": "/docs/documentation/display/height.html"
  },
  "28": {
    "id": "28",
    "title": "hideMenu",
    "content": "type: booleandefault: falseBoolean.If true, webweb’s menu’s will be hidden and only the network visualization will be shown.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])# hide webweb's menusweb.display.hideMenu = True# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;hideMenu&quot;: true    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/hideMenu.html",
    "relUrl": "/docs/documentation/display/hideMenu.html"
  },
  "29": {
    "id": "29",
    "title": "webweb",
    "content": "webweb!a tool for creating, displaying, and sharing interactive network visualizations on the web designed for simplicity and ease of use.features  simple and configurable model  easy to share (one file, no dependencies)  easy to embed  does what you need it to (multiple networks, layered networks)  interfaces for multiple languages (python, MATLAB) and libraries (networkx)Alright, I have an adjacency matrix, how do I get this webweb thing to show it to me?showing:                 python            matlabfrom webweb import Web# Connect two nodesedge_list = [[0, 1]]# Instantiate webweb objectweb = Web(edge_list)# Launch webbrowser with resultweb.draw()A = floor(1.01 * rand(100,100)); A = A + A'; A(A&amp;gt;0) = 1;webweb(A);How do I install it?showing:                 python            matlabpip install webwebgit clone //https://github.com/dblarremore/webweb",
    "url": "/",
    "relUrl": "/"
  },
  "30": {
    "id": "30",
    "title": "invertBinaryColors",
    "content": "type: booleandefault: falsewe can flip the colors used for True and False if we’re coloring nodes by a binary attribute.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], display={    'metadata' : {        'isHappy' : {            'values' : [True, False, False, True, True, False],        }    }})# use the 'isHappy' attribute to color nodesweb.display.colorBy = 'isHappy'# invert the colors used for `False` and `True`web.display.invertBinaryColors = True# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;isHappy&quot;,        &quot;invertBinaryColors&quot;: true,        &quot;metadata&quot;: {            &quot;isHappy&quot;: {                &quot;values&quot;: [                    true,                    false,                    false,                    true,                    true,                    false                ]            }        }    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/invertBinaryColors.html",
    "relUrl": "/docs/documentation/display/invertBinaryColors.html"
  },
  "31": {
    "id": "31",
    "title": "invertBinarySizes",
    "content": "type: booleandefault: falseIf we’re sizing nodes by a binary attribute, by default nodes with a value of True will be big and nodes with a value of False will be small, but if we want to, we can flip that.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], display={    'metadata' : {        'isHappy' : {            'values' : [True, False, False, True, True, False],        }    }})# use the 'isHappy' attribute to size nodesweb.display.sizeBy = 'isHappy'# invert the sizes used for `False` and `True` (make `False` big and `True` small)web.display.invertBinarySizes = True# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;invertBinarySizes&quot;: true,        &quot;metadata&quot;: {            &quot;isHappy&quot;: {                &quot;values&quot;: [                    true,                    false,                    false,                    true,                    true,                    false                ]            }        },        &quot;sizeBy&quot;: &quot;isHappy&quot;    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/invertBinarySizes.html",
    "relUrl": "/docs/documentation/display/invertBinarySizes.html"
  },
  "32": {
    "id": "32",
    "title": "layers",
    "content": "webweb supports adding layers to networks (think timeslices). You can more forward through these with the right arrow key and backwards with the left.showing:                 python            python (networkx)            matlab            jsonfrom webweb import Webweb = Web(    title='oroboros',    adjacency=[[0, 1], [1, 2], [2, 3]],    metadata={        'isHead' : {            'values' : [True, False, False, False],        }    })# oroboros begins chompin'web.networks.oroboros.add_layer(    adjacency=[[0, 1], [1, 2], [2, 3], [3, 0]],    metadata={        'isHead' : {            'values' : [True, False, False, False],        }    })web.networks.oroboros.add_layer(    adjacency=[[0, 1], [1, 2], [2, 0]],    metadata={        'isHead' : {            'values' : [True, False, False],        }    })web.networks.oroboros.add_layer(    adjacency=[[0, 1], [1, 0]],    metadata={        'isHead' : {            'values' : [True, False],        }    })# lame symbol for infinity if you ask me.web.networks.oroboros.add_layer(    adjacency=[],    metadata={        'isHead' : {            'values' : [True],        }    })# display the first layer first (you could put, say, 1 here and it would display the second)web.display.networkLayer = 0# we'll compute node color by the `isHead` attributeweb.display.colorBy = 'isHead'# we'll compute node size by the `isHead` attributeweb.display.sizeBy = 'isHead'# show the visualizationweb.show()from webweb import Webimport networkx as nxsnake = nx.Graph()snake.add_edges_from([[0, 1], [1, 2], [2, 3]])snake.nodes[0]['isHead'] = Truesnake.nodes[1]['isHead'] = Falsesnake.nodes[2]['isHead'] = Falsesnake.nodes[3]['isHead'] = Falseweb = Web(title='oroboros', nx_G=snake)snake.add_edge(0, 3)web.networks.oroboros.add_layer(nx_G=snake)snake.remove_node(3)snake.add_edge(0, 2)web.networks.oroboros.add_layer(nx_G=snake)snake.remove_node(2)snake.add_edge(0, 1)web.networks.oroboros.add_layer(nx_G=snake)snake.remove_node(1)web.networks.oroboros.add_layer(nx_G=snake)# display the first layer first (you could put, say, 1 here and it would display the second)web.display.networkLayer = 0# we'll compute node color by the `isHead` attributeweb.display.colorBy = 'isHead'# we'll compute node size by the `isHead` attributeweb.display.sizeBy = 'isHead'# show the visualizationweb.show()% define a few layers' edge lists for a multilayer network called oroborosl_one = [1,2; 2,3; 3,4];l_two = [1,2; 2,3; 3,4; 4,1];l_three = [1,2; 2,3; 3,1];l_four = [1,2; 2,1];l_five = [];% Place the layers under oroboros in the order that you'd like them.% Let's initialize an empty array of layers firstww.networks.oroboros.layers = {};% Build the first layer as a networkObjectnetObj.edgeList = l_one;% Assign it its *own* metadata, specific to this layernetObj.metadata.isHead.values = [1,0,0,0];netObj.metadata.isHead.type = 'binary';% Append it to the layersww.networks.oroboros.layers{end+1} = netObj;% Repeat for layer 2netObj.edgeList = l_two;netObj.metadata.isHead.values = [1,0,0,0];netObj.metadata.isHead.type = 'binary';ww.networks.oroboros.layers{end+1} = netObj;% ... and layer 3.netObj.edgeList = l_three;netObj.metadata.isHead.values = [1,0,0];netObj.metadata.isHead.type = 'binary';ww.networks.oroboros.layers{end+1} = netObj;% ... and layer 4.netObj.edgeList = l_four;netObj.metadata.isHead.values = [1,0];netObj.metadata.isHead.type = 'binary';ww.networks.oroboros.layers{end+1} = netObj;% ... and layer 5.netObj.edgeList = l_five;netObj.metadata.isHead.values = 1;netObj.metadata.isHead.type = 'binary';ww.networks.oroboros.layers{end+1} = netObj;% BONUS: set default node color and size to the `isHead` attributeww.display.colorBy = 'isHead';ww.display.sizeBy = 'isHead';webweb(ww);{    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;isHead&quot;,        &quot;networkLayer&quot;: 0,        &quot;sizeBy&quot;: &quot;isHead&quot;    },    &quot;networks&quot;: {        &quot;oroboros&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ]                    ],                    &quot;metadata&quot;: {                        &quot;isHead&quot;: {                            &quot;values&quot;: [                                true,                                false,                                false,                                false                            ]                        }                    },                    &quot;nodes&quot;: null                },                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            0                        ]                    ],                    &quot;metadata&quot;: {                        &quot;isHead&quot;: {                            &quot;values&quot;: [                                true,                                false,                                false,                                false                            ]                        }                    },                    &quot;nodes&quot;: null                },                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            0                        ]                    ],                    &quot;metadata&quot;: {                        &quot;isHead&quot;: {                            &quot;values&quot;: [                                true,                                false,                                false                            ]                        }                    },                    &quot;nodes&quot;: null                },                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            0                        ]                    ],                    &quot;metadata&quot;: {                        &quot;isHead&quot;: {                            &quot;values&quot;: [                                true,                                false                            ]                        }                    },                    &quot;nodes&quot;: null                },                {                    &quot;edgeList&quot;: [],                    &quot;metadata&quot;: {                        &quot;isHead&quot;: {                            &quot;values&quot;: [                                true                            ]                        }                    },                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;oroboros&quot;}",
    "url": "/docs/examples/layers.html",
    "relUrl": "/docs/examples/layers.html"
  },
  "33": {
    "id": "33",
    "title": "linkLength",
    "content": "type: positive non-zero integersynonyms: ldefault: 20we can change the length of link edges by setting the display.linkLength parameter.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])web.display.linkLength = 100# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;linkLength&quot;: 100    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/linkLength.html",
    "relUrl": "/docs/documentation/display/linkLength.html"
  },
  "34": {
    "id": "34",
    "title": "linkStrength",
    "content": "type: positive non-zero floatdefault: 1we can adjust how much links resist deformation.This number should be between 0 and 1.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])web.display.linkStrength = .5# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;linkStrength&quot;: 0.5    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/linkStrength.html",
    "relUrl": "/docs/documentation/display/linkStrength.html"
  },
  "35": {
    "id": "35",
    "title": "multiple networks",
    "content": "you can give webweb more than one network and toggle between those networks with the up and down arrow keys.showing:                 python            python (networkx)            matlab            jsonfrom webweb import Web# define the node names and a hunger metadata attribute to appear in all networksweb = Web(    display={        'nodes' : {            0 : {                'name' : 'dane',                'hunger' : 4,            },            1 : {                'name' : 'sebastian',                'hunger' : 9,            },            2 : {                'name' : 'manny',                'hunger' : 2,            },            3 : {                'name' : 'brock',                'hunger' : 4,            },            4 : {                'name' : 'ted',                'hunger' : 12.1,            },            5 : {                'name' : 'donnie',                'hunger' : 5,            },        }    },)# add a 'snake' networkweb.networks.snake(    adjacency=[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]],    nodes={        0 : {            'isHead' : False,        },        1 : {            'isHead' : False,        },        2 : {            'isHead' : False,        },        3 : {            'isHead' : False,        },        4 : {            'isHead' : False,        },        5 : {            'isHead' : True,        },    },)# add a 'starfish' networkweb.networks.starfish(    adjacency=[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],    nodes={        0 : {            'texture' : 'gooey',            'power' : 1,        },        1 : {            'texture' : 'fishy',            'power' : 3,        },        2 : {            'texture' : 'chewy',            'power' : 3.8,        },        3 : {            'texture' : 'crunchy',            'power' : 0.2,        },        4 : {            'texture' : 'chewy',            'power' : 1,        },        5 : {            'texture' : 'gooey',            'power' : 3.1415,        },    })# display the `starfish` network firstweb.display.networkName = 'starfish'# we'll compute node color by the `texture` attributeweb.display.colorBy = 'texture'# we'll compute node size by the `hunger` attributeweb.display.sizeBy = 'hunger'# show the visualizationweb.show()from webweb import Webimport networkx as nx# define the node names and a hunger metadata attribute to appear in all networksweb = Web(    display={        'nodes' : {            0 : {                'name' : 'dane',                'hunger' : 4,            },            1 : {                'name' : 'sebastian',                'hunger' : 9,            },            2 : {                'name' : 'manny',                'hunger' : 2,            },            3 : {                'name' : 'brock',                'hunger' : 4,            },            4 : {                'name' : 'ted',                'hunger' : 12.1,            },            5 : {                'name' : 'donnie',                'hunger' : 5,            },        }    },)snake = nx.Graph()snake.add_edges_from([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])snake.nodes[0]['isHead'] = Falsesnake.nodes[1]['isHead'] = Falsesnake.nodes[2]['isHead'] = Falsesnake.nodes[3]['isHead'] = Falsesnake.nodes[4]['isHead'] = Falsesnake.nodes[5]['isHead'] = True# add the 'snake' networkweb.networks.snake(nx_G=snake)starfish = nx.Graph()starfish.add_edges_from([[0, 1], [0, 2], [0, 3], [0, 4], [0, 5]])starfish.nodes[0]['texture'] = 'gooey'starfish.nodes[0]['power'] = 1starfish.nodes[1]['texture'] = 'fishy'starfish.nodes[0]['power'] = 3starfish.nodes[2]['texture'] = 'chewy'starfish.nodes[0]['power'] = 3.8starfish.nodes[3]['texture'] = 'crunchy'starfish.nodes[0]['power'] = 0.2starfish.nodes[4]['texture'] = 'chewy'starfish.nodes[0]['power'] = 1starfish.nodes[5]['texture'] = 'gooey'starfish.nodes[0]['power'] = 3.1415# add the 'starfish' networkweb.networks.starfish(nx_G=starfish)# display the `starfish` network firstweb.display.networkName = 'starfish'# we'll compute node color by the `hunger` attributeweb.display.colorBy = 'hunger'# we'll compute node size by the `isHead` attributeweb.display.sizeBy = 'isHead'# show the visualizationweb.show()% set some node names and a metadata attribute (hunger) to appear for all% of the networks that we will display. Since these metadata attributes% apply globally, we put them under ww.displayww.display.metadata.names = {'dane','sebastian','manny','brock','ted','donnie'};ww.display.metadata.hunger = [4,9,2,4,12.1,5];% define a network called snakeww.networks.snake.edgeList = [1,2; 2,3; 3,4; 4,5; 5,6];ww.networks.snake.metadata.isHead.values = [0,0,0,0,0,1];% define another called starfishww.networks.starfish.edgeList = [1,2; 1,3; 1,4; 1,5; 1,6];ww.networks.starfish.metadata.texture.values={'gooey','fishy','chewy',...    'crunchy','chewy','gooey'};ww.networks.starfish.metadata.power.values={1,3,3.8,0.2,1,3.1415};% BONUS force the starfish network to display first by defaultww.display.networkName = 'starfish';% BONUS force node color to texture metadataww.display.colorBy = 'texture';% BONUS force node size to isHead metadataww.display.sizeBy = 'hunger';webweb(ww){    &quot;display&quot;: {        &quot;colorBy&quot;: &quot;texture&quot;,        &quot;networkName&quot;: &quot;starfish&quot;,        &quot;nodes&quot;: {            &quot;0&quot;: {                &quot;hunger&quot;: 4,                &quot;name&quot;: &quot;dane&quot;            },            &quot;1&quot;: {                &quot;hunger&quot;: 9,                &quot;name&quot;: &quot;sebastian&quot;            },            &quot;2&quot;: {                &quot;hunger&quot;: 2,                &quot;name&quot;: &quot;manny&quot;            },            &quot;3&quot;: {                &quot;hunger&quot;: 4,                &quot;name&quot;: &quot;brock&quot;            },            &quot;4&quot;: {                &quot;hunger&quot;: 12.1,                &quot;name&quot;: &quot;ted&quot;            },            &quot;5&quot;: {                &quot;hunger&quot;: 5,                &quot;name&quot;: &quot;donnie&quot;            }        },        &quot;sizeBy&quot;: &quot;hunger&quot;    },    &quot;networks&quot;: {        &quot;snake&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: {                        &quot;0&quot;: {                            &quot;isHead&quot;: false                        },                        &quot;1&quot;: {                            &quot;isHead&quot;: false                        },                        &quot;2&quot;: {                            &quot;isHead&quot;: false                        },                        &quot;3&quot;: {                            &quot;isHead&quot;: false                        },                        &quot;4&quot;: {                            &quot;isHead&quot;: false                        },                        &quot;5&quot;: {                            &quot;isHead&quot;: true                        }                    }                }            ]        },        &quot;starfish&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            0,                            2                        ],                        [                            0,                            3                        ],                        [                            0,                            4                        ],                        [                            0,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: {                        &quot;0&quot;: {                            &quot;power&quot;: 1,                            &quot;texture&quot;: &quot;gooey&quot;                        },                        &quot;1&quot;: {                            &quot;power&quot;: 3,                            &quot;texture&quot;: &quot;fishy&quot;                        },                        &quot;2&quot;: {                            &quot;power&quot;: 3.8,                            &quot;texture&quot;: &quot;chewy&quot;                        },                        &quot;3&quot;: {                            &quot;power&quot;: 0.2,                            &quot;texture&quot;: &quot;crunchy&quot;                        },                        &quot;4&quot;: {                            &quot;power&quot;: 1,                            &quot;texture&quot;: &quot;chewy&quot;                        },                        &quot;5&quot;: {                            &quot;power&quot;: 3.1415,                            &quot;texture&quot;: &quot;gooey&quot;                        }                    }                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/examples/multiple_networks.html",
    "relUrl": "/docs/examples/multiple_networks.html"
  },
  "36": {
    "id": "36",
    "title": "nameToMatch",
    "content": "type: stringdefault: “”we can show nodes whose name matches a given value by setting the nameToMatch parameter.showing:                 python            jsonfrom webweb import Webweb = Web(    adjacency=[[0, 1], [1, 2]],    display={        'nodes' : {            0 : {                'name' : 'Huberg',            },            1 : {                'name' : 'Pierot',            },            2 : {                'name' : 'Slartibertfast',            },        },    },)web.display.nameToMatch = 'Pierot'# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;nameToMatch&quot;: &quot;Pierot&quot;,        &quot;nodes&quot;: {            &quot;0&quot;: {                &quot;name&quot;: &quot;Huberg&quot;            },            &quot;1&quot;: {                &quot;name&quot;: &quot;Pierot&quot;            },            &quot;2&quot;: {                &quot;name&quot;: &quot;Slartibertfast&quot;            }        }    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/nameToMatch.html",
    "relUrl": "/docs/documentation/display/nameToMatch.html"
  },
  "37": {
    "id": "37",
    "title": "networkLayer",
    "content": "type: positive integer (an index)default: 0webweb will by default display the first layer, but if we’d like to show a particular one we can do so by setting the display.networkLayer property to the index of the layer we want to show.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web(title='webweb', adjacency=[[0, 1]])web.networks.webweb.add_layer(adjacency=[[0, 1], [1, 2]])web.display.networkLayer = 1# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;networkLayer&quot;: 1    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                },                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/networkLayer.html",
    "relUrl": "/docs/documentation/display/networkLayer.html"
  },
  "38": {
    "id": "38",
    "title": "networkName",
    "content": "type: stringwebweb will by default display the first network we add to it, but if we’d like to show a particular one we can do so by setting the display.networkName property to name of the network we’d like to show.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web(title='web1', adjacency=[[0, 1]])web.networks.web2(adjacency=[[0, 1], [1, 2]])web.display.networkName = &quot;web2&quot;# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;networkName&quot;: &quot;web2&quot;    },    &quot;networks&quot;: {        &quot;web1&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        },        &quot;web2&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;web1&quot;}",
    "url": "/docs/documentation/display/networkName.html",
    "relUrl": "/docs/documentation/display/networkName.html"
  },
  "39": {
    "id": "39",
    "title": "python",
    "content": "full documentation for the python code.",
    "url": "/documentation/python/",
    "relUrl": "/documentation/python/"
  },
  "40": {
    "id": "40",
    "title": "radius",
    "content": "type: positive non-zero floatsynonyms: rdefault: 5we can change the radius of the nodes by setting the display.radius parameter.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])# make nodes really bigweb.display.radius = 20# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;radius&quot;: 20    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/radius.html",
    "relUrl": "/docs/documentation/display/radius.html"
  },
  "41": {
    "id": "41",
    "title": "scaleLinkOpacity",
    "content": "type: booleandefault: falsewe can scale link opacities by their weight by setting the scaleLinkOpacity parameter.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1, 5], [1, 2, 20], [2, 3, .2], [3, 4, 70], [4, 5, 100]])web.display.scaleLinkOpacity = True# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;scaleLinkOpacity&quot;: true    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1,                            5                        ],                        [                            1,                            2,                            20                        ],                        [                            2,                            3,                            0.2                        ],                        [                            3,                            4,                            70                        ],                        [                            4,                            5,                            100                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/scaleLinkOpacity.html",
    "relUrl": "/docs/documentation/display/scaleLinkOpacity.html"
  },
  "42": {
    "id": "42",
    "title": "scaleLinkWidth",
    "content": "type: booleandefault: falsewe can scale link widths by their weight by setting the scaleLinkWidth parameter.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1, 5], [1, 2, 20], [2, 3, .2], [3, 4, 70], [4, 5, 100]])web.display.scaleLinkWidth = True# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;scaleLinkWidth&quot;: true    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1,                            5                        ],                        [                            1,                            2,                            20                        ],                        [                            2,                            3,                            0.2                        ],                        [                            3,                            4,                            70                        ],                        [                            4,                            5,                            100                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/scaleLinkWidth.html",
    "relUrl": "/docs/documentation/display/scaleLinkWidth.html"
  },
  "43": {
    "id": "43",
    "title": "showNodeNames",
    "content": "type: booleandefault: falsewe can show all node names by setting the showNodeNames parameter.showing:                 python            jsonfrom webweb import Webweb = Web(    adjacency=[[0, 1], [1, 2]],    display={        'nodes' : {            0 : {                'name' : 'Huberg',            },            1 : {                'name' : 'Pierot',            },            2 : {                'name' : 'Slartibertfast',            },        },    },)web.display.showNodeNames = True# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;nodes&quot;: {            &quot;0&quot;: {                &quot;name&quot;: &quot;Huberg&quot;            },            &quot;1&quot;: {                &quot;name&quot;: &quot;Pierot&quot;            },            &quot;2&quot;: {                &quot;name&quot;: &quot;Slartibertfast&quot;            }        },        &quot;showNodeNames&quot;: true    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/showNodeNames.html",
    "relUrl": "/docs/documentation/display/showNodeNames.html"
  },
  "44": {
    "id": "44",
    "title": "sizeBy",
    "content": "type: stringdefault: ‘none’we can compute node radii by a metadata attribute by setting the sizeBy parameter to that attribute’s name.categorical metadata attributes can’t be used to compute node sizes.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], display={    'metadata' : {        'happiness' : {            'values' : [5, 10, 7, 8, 1, 3],        }    }})# use the 'happiness' attribute to size nodesweb.display.sizeBy = 'happiness'# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;metadata&quot;: {            &quot;happiness&quot;: {                &quot;values&quot;: [                    5,                    10,                    7,                    8,                    1,                    3                ]            }        },        &quot;sizeBy&quot;: &quot;happiness&quot;    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/sizeBy.html",
    "relUrl": "/docs/documentation/display/sizeBy.html"
  },
  "45": {
    "id": "45",
    "title": "webweb in the wild",
    "content": "a running list of place’s webweb’s been used! If a project of yours uses webweb, shoot an email and we’ll add it to the list!  Networks in Infinite Jest",
    "url": "/in-the-wild/",
    "relUrl": "/in-the-wild/"
  },
  "46": {
    "id": "46",
    "title": "width",
    "content": "type: positive non-zero floatsynonyms: wwe can change the width of the visualization by setting the display.width property.showing:                 python            jsonfrom webweb import Web# Instantiate webweb objectweb = Web([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]])web.display.width = 50# show the visualizationweb.show(){    &quot;display&quot;: {        &quot;width&quot;: 50    },    &quot;networks&quot;: {        &quot;webweb&quot;: {            &quot;layers&quot;: [                {                    &quot;edgeList&quot;: [                        [                            0,                            1                        ],                        [                            1,                            2                        ],                        [                            2,                            3                        ],                        [                            3,                            4                        ],                        [                            4,                            5                        ]                    ],                    &quot;metadata&quot;: null,                    &quot;nodes&quot;: null                }            ]        }    },    &quot;title&quot;: &quot;webweb&quot;}",
    "url": "/docs/documentation/display/width.html",
    "relUrl": "/docs/documentation/display/width.html"
  }
}
